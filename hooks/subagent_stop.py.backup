#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "python-dotenv",
# ]
# ///

import argparse
import json
import os
import sys
import subprocess
from pathlib import Path
from datetime import datetime

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # dotenv is optional


def get_tts_script_path():
    """
    Determine which TTS script to use based on available API keys.
    Priority order: ElevenLabs > OpenAI > pyttsx3
    """
    # Get current script directory and construct utils/tts path
    script_dir = Path("~/.claude/hooks").expanduser().parent
    tts_dir = script_dir / "utils" / "tts"

    # Check for ElevenLabs API key (highest priority)
    if os.getenv('ELEVENLABS_API_KEY'):
        elevenlabs_script = tts_dir / "elevenlabs_tts.py"
        if elevenlabs_script.exists():
            return str(elevenlabs_script)

    # Check for OpenAI API key (second priority)
    if os.getenv('OPENAI_API_KEY'):
        openai_script = tts_dir / "openai_tts.py"
        if openai_script.exists():
            return str(openai_script)

    # Fall back to pyttsx3 (no API key required)
    pyttsx3_script = tts_dir / "pyttsx3_tts.py"
    if pyttsx3_script.exists():
        return str(pyttsx3_script)

    return None


def announce_subagent_completion():
    """Announce subagent completion using the best available TTS service."""
    try:
        tts_script = get_tts_script_path()
        if not tts_script:
            return  # No TTS scripts available

        # Use fixed message for subagent completion
        completion_message = "Subagent Complete"

        # Call the TTS script with the completion message
        subprocess.run([
            "/mnt/c/Users/nitro/.local/bin/uv.exe", "run", "--script", "C:\\Users\\nitro\\elevenlabs_tts.py", "--voice", "bellab", completion_message
        ],
        capture_output=True,  # Suppress output
        timeout=10  # 10-second timeout
        )

    except (subprocess.TimeoutExpired, subprocess.SubprocessError, FileNotFoundError):
        # Fail silently if TTS encounters issues
        pass
    except Exception:
        # Fail silently for any other errors
        pass


def main():
    try:
        # Parse command line arguments
        parser = argparse.ArgumentParser()
        parser.add_argument('--chat', action='store_true', help='Copy transcript to chat.json')
        parser.add_argument('--notify', action='store_true', help='Enable TTS completion announcement')
        args = parser.parse_args()

        # Read JSON input from stdin
        input_data = json.load(sys.stdin)

        # Extract required fields
        session_id = input_data.get("session_id", "")
        stop_hook_active = input_data.get("stop_hook_active", False)

        # Ensure log directory exists
        current_date = datetime.now().strftime("%Y%m%d")
        log_dir = Path('.claude/logs')
        os.makedirs(log_dir, exist_ok=True)
        log_path = os.path.join(log_dir, "subagent_stop.json")

        # Read existing log data or initialize empty list
        if os.path.exists(log_path):
            with open(log_path, 'r') as f:
                try:
                    log_data = json.load(f)
                except (json.JSONDecodeError, ValueError):
                    log_data = []
        else:
            log_data = []

        # Append new data
        log_data.append(input_data)

        # Write back to file with formatting
        with open(log_path, 'w') as f:
            json.dump(log_data, f, indent=2)

        # Handle --chat switch (same as stop.py)
        if args.chat and 'transcript_path' in input_data:
            transcript_path = input_data['transcript_path']
            if os.path.exists(transcript_path):
                # Read .jsonl file and convert to JSON array
                chat_data = []
                try:
                    with open(transcript_path, 'r') as f:
                        for line in f:
                            line = line.strip()
                            if line:
                                try:
                                    chat_data.append(json.loads(line))
                                except json.JSONDecodeError:
                                    pass  # Skip invalid lines

                    # Create unique filename based on session_id and timestamp
                    from datetime import datetime
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    session_short = session_id[:8] if len(session_id) >= 8 else session_id
                    chat_filename = f'transcript_subagent_{session_short}_{timestamp}.json'

                    # Ensure dated subdirectory exists
                    dated_log_dir = log_dir / current_date
                    dated_log_dir.mkdir(parents=True, exist_ok=True)
                    chat_file = dated_log_dir / chat_filename

                    with open(chat_file, 'w') as f:
                        json.dump(chat_data, f, indent=2)
                except Exception:
                    pass  # Fail silently

        # Announce subagent completion via TTS (only if --notify flag is set)
        if args.notify:
            announce_subagent_completion()

        sys.exit(0)

    except json.JSONDecodeError as e:
        # Log JSON decode errors to help with debugging
        try:
            error_log = Path('.claude/logs/hook_errors.log')
            with open(error_log, 'a') as f:
                f.write(f"{datetime.now().isoformat()}: subagent_stop.py JSON decode error: {e}\n")
        except:
            pass  # Still fail silently if we can't log
        sys.exit(0)
    except Exception as e:
        # Log other errors to help with debugging
        try:
            error_log = Path('.claude/logs/hook_errors.log')
            with open(error_log, 'a') as f:
                f.write(f"{datetime.now().isoformat()}: subagent_stop.py error: {e}\n")
                import traceback
                f.write(traceback.format_exc() + "\n")
        except:
            pass  # Still fail silently if we can't log
        sys.exit(0)


if __name__ == "__main__":
    main()
